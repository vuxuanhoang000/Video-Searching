from uuid import uuid4
from moviepy.editor import VideoFileClip
from typing import Tuple
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from models import Base, Video, Image

INPUT_VIDEO = "videos/Amazing Scene of Wild Animals In 4K - Scenic Relaxation Film.mp4"


def trim_video(t_start: Tuple[int, int], t_end: Tuple[int, int]) -> str:
    output_video = f"videos/{uuid4().hex}.mp4"
    clip = VideoFileClip(INPUT_VIDEO)
    clip1 = clip.subclip(t_start, t_end)
    clip1.write_videofile(output_video, codec="libx264")
    return output_video


def write_videos(connection_string):
    engine = create_engine(connection_string)
    with Session(engine) as session:
        times = [
            [(0, 34), (0, 50)],
            [(0, 51), (1, 2)],
            [(1, 3), (1, 19)],
            [(1, 21), (1, 34)],
            [(1, 36), (2, 0)],
            [(2, 2), (2, 15)],
            [(2, 16), (2, 27)],
            [(2, 28), (2, 40)],
            [(2, 42), (2, 56)],
            [(2, 57), (3, 32)],
            [(3, 34), (3, 48)],
            [(3, 50), (4, 5)],
            [(4, 6), (4, 19)],
            [(4, 21), (4, 46)],
            [(4, 48), (5, 9)],
            [(5, 11), (5, 30)],
            [(5, 31), (6, 4)],
            [(6, 6), (6, 30)],
            [(6, 31), (6, 52)],
            [(6, 53), (7, 12)],
            [(7, 14), (7, 53)],
            [(7, 55), (8, 23)],
            [(8, 25), (8, 35)],
            [(8, 36), (8, 54)],
            [(8, 55), (9, 20)],
            [(9, 45), (10, 10)],
            [(10, 11), (10, 29)],
            [(10, 31), (10, 42)],
            [(10, 43), (11, 2)],
            [(11, 3), (11, 27)],
            [(11, 44), (11, 58)],
            [(11, 59), (12, 14)],
            [(12, 16), (12, 31)],
            [(12, 44), (12, 54)],
            [(12, 55), (13, 10)],
            [(13, 11), (13, 59)],
            [(14, 0), (14, 15)],
            [(14, 16), (14, 30)],
            [(14, 46), (14, 55)],
            [(15, 13), (15, 25)],
            [(15, 26), (15, 47)],
            [(15, 49), (16, 28)],
            [(16, 30), (16, 53)],
            [(16, 55), (17, 32)],
            [(17, 34), (18, 4)],
            [(18, 28), (18, 54)],
            [(18, 55), (19, 5)],
            [(19, 6), (19, 30)],
            [(19, 31), (19, 44)],
            [(20, 0), (20, 13)],
            [(20, 14), (20, 23)],
            [(20, 24), (20, 33)],
            [(20, 34), (20, 42)],
            [(20, 43), (21, 22)],
            [(21, 43), (22, 0)],
            [(22, 39), (22, 55)],
            [(22, 56), (23, 1)],
            [(23, 2), (23, 14)],
            [(23, 15), (23, 20)],
            [(23, 21), (23, 34)],
            [(23, 36), (23, 54)],
            [(23, 56), (24, 17)],
            [(24, 19), (24, 39)],
            [(24, 40), (25, 1)],
            [(25, 2), (25, 18)],
            [(25, 20), (25, 36)],
            [(25, 38), (26, 9)],
            [(26, 11), (26, 21)],
            [(26, 22), (26, 32)],
            [(26, 34), (26, 43)],
            [(26, 44), (27, 10)],
            [(27, 12), (27, 27)],
            [(27, 29), (27, 46)],
            [(27, 48), (27, 55)],
            [(27, 56), (28, 13)],
            [(28, 15), (28, 28)],
            [(28, 30), (28, 42)],
            [(28, 44), (28, 58)],
            [(29, 7), (29, 14)],
        ]
        for time in times:
            t_start, t_end = time
            video_path = trim_video(t_start, t_end)
            video = Video(path=video_path)
            session.add(video)
            session.commit()
    pass
